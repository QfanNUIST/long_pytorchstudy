'''
broadcast规则
如果从最小维往最大维扩展，
如果对应的维度不是1维如[2,3,4],那么必须与对应维度的数值相同
扩张规则
a = [dim0,dim1,dim2,dim3] 在广播中定义3-->0为小维度到大维度
可以理解为N，C，H，W中Nbatch为最大的
a = [4,32,8]#4个班级，32个学生，每人8个成绩

规则一：输入的只有一维向量，默认其为最小维度
b1 = [1]    #所有人的8个成绩都加5分b1 = 5
a1 = a+b1   #b1[1]--->b1[1,1,1(原本的算作最小维)]--->b1[4,32,8]

规则二：如果不是一维，需要将维数固定，且与对应最小维数相同
b1 = [8]   #b1 = {0,0,0,5,0,0,0,0}英语加五分
a2 = a+b1  #b1[8]-->[1,1,8]--->[4,32,8]

b1 = [1,8],b1 = [32,8]，b1 = [1,32,8],都可以

但是不能为
b1 = [4]#想要直接从大维度往小维度广播
b1 = [1,1,4],维度不匹配

'''
import torch
'''如果只是在最前面少一个维度，那么就会自动升一维然后，expand'''
a = torch.rand(4,32,14,14)
b = torch.rand(32,1,1)
c = a+b   #[32,1,1] ==> [1,32,1,1] ==> [4,32,14,14]
print(a.shape) #torch.Size([4, 32, 14, 14])

'''broadcast可以将两个矩阵同时广播'''
a = torch.rand(1,4)
b = torch.rand(3,1)
#两者相加a会由[1，4]===>[3,4]
#b [3,1] ==> [3,4]
print((a+b).shape)

'''扩张规则
a = [dim0,dim1,dim2,dim3] 在广播中定义3-->0为小维度到大维度
N，C，H，W
a = [4,32,8]#4个班级，32个学生，每人8个成绩

规则一：输入的只有一维向量，默认其为最小维度
b1 = [1]    #所有人的8个成绩都加5分b1 = 5
a1 = a+b1   #b1[1]--->b1[1,1,1(原本的算作最小维)]--->b1[4,32,8]

规则二：如果不是一维，需要将维数固定，且与对应最小维数相同
b1 = [8]   #b1 = {0,0,0,5,0,0,0,0}英语加五分
a2 = a+b1  #b1[8]-->[1,1,8]--->[4,32,8]

b1 = [1,8],b1 = [32,8]，b1 = [1,32,8],都可以

但是不能为
b1 = [4]#想要直接从大维度往小维度广播
b1 = [1,1,4],维度不匹配
'''

